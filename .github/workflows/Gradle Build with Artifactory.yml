name: Gradle Build Spring Petclinic with JFrog Artifactory

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  actions: read           # for detecting the Github Actions environment
  id-token: write         # for creating OIDC tokens for signing
  packages: write         # for uploading attestations
  contents: read          # read the contents permission
  security-events: write  # for uploading code scanning

jobs:
  build:
    name: 'Build Spring Petclinic'
    env:
      JFROG_CLI_BUILD_NAME: 'Petclinic from GitHub workflow'
      JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}
      JFROG_CLI_BUILD_PROJECT: ${{ vars.JF_PROJECT }}
      JFROG_CLI_LOG_LEVEL: INFO
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]

    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      - 
        name: Set up JDK ${{matrix.java}}
        uses: actions/setup-java@v4
        with:
          java-version: ${{matrix.java}}
          distribution: 'adopt'
      
      - 
        name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: https://${{ vars.JF_URL }}/
        with:
          oidc-provider-name: mikeho-github
          oidc-audience: mikeho-audience
      -
        name: Configure Build
        run: |
          jf gradlec --repo-resolve mikeho-petclinc-gradle-remote --repo-deploy mikeho-petclinic-gradle-dev-local
          #echo "petclinicArtifactName=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)" >> $GITHUB_ENV
          #echo "petclinicVersion=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
      -
        name: JFrog Curation Audit
        run: |
          jf curation-audit
      -
        name: Audit Source Code
        run: |
          jf audit --licenses --format=table --gradle=true
      -
        name: Build Maven package
        run: |
          #jf mvn clean install -DskipTests=true -Dtest=!PostgresIntegrationTests* '-Dspring-javaformat.skip=true' --project ${{ env.JFROG_CLI_BUILD_PROJECT }} -Dartifactory.publish.artifacts=false
          jf gradle clean artifactoryPublish --build-name "${{ env.JFROG_CLI_BUILD_NAME }}" --build-number "${{ env.JFROG_CLI_BUILD_NUMBER }}" --project ${{ env.JFROG_CLI_BUILD_PROJECT }} --scan true
      -
        name: Publish build info
        if: github.ref == 'refs/heads/main'
        run: |
          jf rt build-publish --project ${{ env.JFROG_CLI_BUILD_PROJECT }} "${{ env.JFROG_CLI_BUILD_NAME }}" "${{ env.JFROG_CLI_BUILD_NUMBER }}"
          # Collect environment variables for the build
          jf rt bce --project ${{ env.JFROG_CLI_BUILD_PROJECT }} "${{ env.JFROG_CLI_BUILD_NAME }}" "${{ env.JFROG_CLI_BUILD_NUMBER }}"
          # Collect VCS details from Git and add them to the build
          jf rt bag --project ${{ env.JFROG_CLI_BUILD_PROJECT }} "${{ env.JFROG_CLI_BUILD_NAME }}" "${{ env.JFROG_CLI_BUILD_NUMBER }}"
      -
        name: Scan build
        if: github.ref == 'refs/heads/main'
        run: |
          jf build-scan --vuln --fail=false --project ${{ env.JFROG_CLI_BUILD_PROJECT }} "${{ env.JFROG_CLI_BUILD_NAME }}" "${{ env.JFROG_CLI_BUILD_NUMBER }}"
     
